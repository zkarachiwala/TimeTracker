@page "/timeentries"
@inject ITimeEntryService TimeEntryService
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>Time Entries</PageTitle>
<h3>Time Entries</h3>

<button class="btn btn-primary mb-2" @onclick="CreateTimeEntry">Create Time Entry</button>

<table>
    <thead>
        <tr>
            <th>Start</th>
            <th>End</th>
            <th>Duration</th>
            <th>Project</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var timeEntry in TimeEntryService.TimeEntries)
        {
            <tr>
                <td>@timeEntry.Start</td>
                <td>@timeEntry.End</td>
                <td>@GetDuration(timeEntry.Start, timeEntry.End)</td>
                <td>@timeEntry.Project.Name</td>
                <td>
                    <button class="btn btn-primary" onclick="@(() => ShowProject(timeEntry.Project.Id))">Show Project</button>
                </td>
                <td>
                    <button class="btn btn-primary" onclick="@(() => EditTimeEntry(timeEntry.Id))">
                        <i class="oi oi-pencil" />
                </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if(projectId > 0)
{
    <ProjectDetails ProjectId="projectId" />
}

@code {

    int projectId = 0;

    protected override async Task OnInitializedAsync()
    {
        await TimeEntryService.GetTimeEntriesByProject(projectId);
        TimeEntryService.OnChange += StateHasChanged;
    }

    private string GetDuration(DateTime? start, DateTime? end)
    {
        if((start is not null) && (end is not null))
        {
            var duration = end.Value - start.Value;
            var result = $"{duration.Hours}h {duration.Minutes}m";
            return result;
        }
        return string.Empty;
    }

    private void ShowProject(int id)
    {
        if(projectId == id)
            return;
        
        projectId = id;
        StateHasChanged();
    }

    public void Dispose()
    {
        TimeEntryService.OnChange -= StateHasChanged;
    }

    private void CreateTimeEntry()
    {
        NavigationManager.NavigateTo("/timeentry");
    }

    private void EditTimeEntry(int id)
    {
        NavigationManager.NavigateTo($"/timeentry/{id}");
    }

}
