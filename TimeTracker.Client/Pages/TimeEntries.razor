@page "/timeentries"
@inject ITimeEntryService TimeEntryService
@inject NavigationManager NavigationManager
@implements IDisposable
@attribute [Authorize]

<PageTitle>Time Entries</PageTitle>
<h3>Time Entries</h3>
<TimeEntryTabs TabChanged="TabChanged"/>

<TimeEntryFilter Type="CurrentFilterType" />

<QuickGrid ItemsProvider="timeEntriesProvider" Pagination="@paginator">
    <PropertyColumn Property="t => t.Start" />
    <PropertyColumn Property="t => t.End" />
    <PropertyColumn Property="t => GetDuration(t.Start, t.End)" Title="Duration" />
    <PropertyColumn Property="t => t.Project.Name" Title="Project">
        <ColumnOptions>
            <div>
                <input type="search" autofocus @bind="projectFilter" @bind:event="oninput"
                    placeholder="Project name..." class="mt-1 p-2 w-full rounded-md border-gray-200 shadow-sm sm:text-sm"/>
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <TemplateColumn>
        <MyButton Text="Show Project" OnClick="@(() => ShowProject(context.Project.Id))" />
    </TemplateColumn>
    <TemplateColumn>
        <button
            class="block rounded-md bg-teal-600 px-2.5 py-2.5 text-sm font-medium text-white transition hover:bg-teal-700"
            onclick="@(() => EditTimeEntry(context.Id))">
            <svg class="w-6 h-6 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                <path d="M12.687 14.408a3.01 3.01 0 0 1-1.533.821l-3.566.713a3 3 0 0 1-3.53-3.53l.713-3.566a3.01 3.01 0 0 1 .821-1.533L10.905 2H2.167A2.169 2.169 0 0 0 0 4.167v11.666A2.169 2.169 0 0 0 2.167 18h11.666A2.169 2.169 0 0 0 16 15.833V11.1l-3.313 3.308Zm5.53-9.065.546-.546a2.518 2.518 0 0 0 0-3.56 2.576 2.576 0 0 0-3.559 0l-.547.547 3.56 3.56Z"/>
                <path d="M13.243 3.2 7.359 9.081a.5.5 0 0 0-.136.256L6.51 12.9a.5.5 0 0 0 .59.59l3.566-.713a.5.5 0 0 0 .255-.136L16.8 6.757 13.243 3.2Z"/>
            </svg>
        </button>
    </TemplateColumn>
</QuickGrid>
<Paginator Value="@paginator" />

<div class="flex justify-content-between items-end">
    <MyButton AddMarginTop Text="Create Time Entry" OnClick="CreateTimeEntry" />
    <span class="font-bold text-lg">Total: @GetTotalDuration()</span>
</div>

@if(CurrentFilterType == TimeEntryTabs.TimeEntryFilterType.Year)
{
    <TimeEntryYearChart />
}

@if(projectId > 0)
{
    <ProjectDetails ProjectId="projectId" />
}

@code {

    int projectId = 0;
    private string? projectFilter;
    PaginationState paginator = new PaginationState { ItemsPerPage = 5 };
    TimeEntryTabs.TimeEntryFilterType CurrentFilterType = TimeEntryTabs.TimeEntryFilterType.Day;
    GridItemsProvider<TimeEntryResponse>? timeEntriesProvider;

    IQueryable<TimeEntryResponse> FilteredTimeEntries
    {
        get
        {
            var result = TimeEntryService.TimeEntries.AsQueryable();

            if(!string.IsNullOrWhiteSpace(projectFilter))
            {
                result = result.Where(t => t.Project.Name
                    .Contains(projectFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }

    protected override void OnInitialized()
    {
        InitTimeEntriesProvider();
        TimeEntryService.OnChange += StateHasChanged;
        TimeEntryService.FilterChanged += InitTimeEntriesProvider;
    }

    private async Task TabChanged(TimeEntryTabs.TimeEntryFilterType type)
    {
        CurrentFilterType = type;
        InitTimeEntriesProvider();
        //await LoadInitialEntries(type);
    }

    private void InitTimeEntriesProvider()
    {
        timeEntriesProvider = async req =>
        {
            TimeEntryResponseWrapper response = new TimeEntryResponseWrapper();
            int reqCount = req.Count == null ? paginator.ItemsPerPage : (int) req.Count;

            switch(CurrentFilterType)
            {
                case TimeEntryTabs.TimeEntryFilterType.Day:
                    response = await TimeEntryService.GetTimeEntriesByDay(
                        TimeEntryService.SelectedDay,
                        TimeEntryService.SelectedMonth,
                        TimeEntryService.SelectedYear,
                        req.StartIndex, reqCount);
                    break;
                case TimeEntryTabs.TimeEntryFilterType.Month:
                    response = await TimeEntryService.GetTimeEntriesByMonth(
                        TimeEntryService.SelectedMonth,
                        TimeEntryService.SelectedYear,
                        req.StartIndex, reqCount);
                    break;
                case TimeEntryTabs.TimeEntryFilterType.Year:
                    response = await TimeEntryService.GetTimeEntriesByYear(
                        TimeEntryService.SelectedYear,
                        req.StartIndex, reqCount);
                    break;
                case TimeEntryTabs.TimeEntryFilterType.Project:
                    response = TimeEntryService.SelectedProjectId <= 0 ?
                        await TimeEntryService.GetTimeEntries(req.StartIndex, reqCount) :
                        await TimeEntryService.GetTimeEntriesByProject(TimeEntryService.SelectedProjectId, req.StartIndex, reqCount);
                    break;
            }
            return GridItemsProviderResult.From(items: response!.TimeEntries, totalItemCount: response!.Count);
        };
        StateHasChanged();      // To re-render grid
    }

    private string GetDuration(DateTime? start, DateTime? end)
    {
        if((start is not null) && (end is not null))
        {
            var duration = end.Value - start.Value;
            var result = $"{duration.Hours}h {duration.Minutes}m";
            return result;
        }
        return string.Empty;
    }

    private string GetTotalDuration()
    {
        int totalMinutes = (int)TimeEntryService.TotalDuration.TotalMinutes;
        int hours = totalMinutes / 60;
        int minutes = totalMinutes % 60;

        return $"{hours}h {minutes}m";
    }

    private void ShowProject(int id)
    {
        if(projectId == id)
            return;
        
        projectId = id;
        StateHasChanged();
    }

    public void Dispose()
    {
        TimeEntryService.OnChange -= StateHasChanged;
        TimeEntryService.FilterChanged -= InitTimeEntriesProvider;
    }

    private void CreateTimeEntry()
    {
        NavigationManager.NavigateTo("/timeentry");
    }

    private void EditTimeEntry(int id)
    {
        NavigationManager.NavigateTo($"/timeentry/{id}");
    }

}
