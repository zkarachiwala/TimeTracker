@page "/register"
@inject IAuthService AuthService

<h3>Register</h3>

<EditForm Model="newUser" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <MyInputText Label="Name" Id="name" @bind-Value="newUser.UserName"
        ValidationFor="() => newUser.UserName" />
    <MyInputText Label="E-Mail" Id="email" @bind-Value="newUser.Email"
        ValidationFor="() => newUser.Email" />
    <MyInputText Label="Password" Id="password" @bind-Value="newUser.Password"
        ValidationFor="() => newUser.Password" Type="password" />
    <MyInputText Label="Confirm Password" Id="confirmPassword" @bind-Value="newUser.ConfirmPassword"
        ValidationFor="() => newUser.ConfirmPassword" Type="password" />
    <MyButton Text="Register" Type="submit" AddMarginTop />
</EditForm>

@if(registrationFailed)
{
    @foreach(var error in errors)
    {
        <div>
            <span class="text-xs text-red-600 font-bold my-1">@error</span>
        </div>
    }
}
@if(registrationSuccessful)
{
    <div>
        <span class="text-xs text-green-600 font-bold my-1">
            Registration successful! You may <a href="login" class="underline">login</a> now.</span>
    </div>
}
@code {
    AccountRegistrationRequest newUser = new AccountRegistrationRequest();
    bool registrationFailed = false;
    bool registrationSuccessful = false;
    List<string> errors = new List<string>();

    async Task HandleSubmit()
    {
        registrationFailed = false;
        errors = new List<string>();

        var response = await AuthService.Register(newUser);
        registrationSuccessful = response.IsSuccessful;
        if (!response.IsSuccessful && response.Errors is not null)
        {
            errors = response.Errors.ToList();
            registrationFailed = true;
        }
        else if(!response.IsSuccessful)
        {
            errors.Add("An unexpected error occured.");
            registrationFailed = true;
        }        
    }
}