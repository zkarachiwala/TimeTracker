@page "/project"
@page "/project/{id:int}"
@using Mapster
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@* @implements IDisposable *@

@if(Id is null)
{
    <PageTitle>Create a new Project</PageTitle>
    <h3>Create a new Project</h3>
} 
else
{
    <PageTitle>Edit the Project "@project.Name"</PageTitle>
    <h3>Edit the Project "@project.Name"</h3>
}


<EditForm Model="project" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div>
        <label for="name">Name</label>
        <InputText id="name"
            @bind-Value="project.Name" class="form-control" />
            <ValidationMessage For="() => project.Name" />
    </div>  
    <div>
        <label for="description">Description</label>
        <InputTextArea id="description"
            @bind-Value="project.Description" class="form-control" />
    </div>       
    <div>
        <label for="startDate">Start</label>
        <InputDate id="startDate"
            @bind-Value="project.StartDate" class="form-control" />
    </div>
    <div>
        <label for="endDate">End</label>
        <InputDate id="endDate"
            @bind-Value="project.EndDate" class="form-control" />
    </div>
    @if(Id is not null)
    {
        <button type="button" class="btn btn-danger mt-2 mx-1" 
            @onclick="DeleteProject">
            Delete
        </button>    
    }
    <button type="submit" class="btn btn-primary mt-2">Submit</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    ProjectRequest project = new ProjectRequest{ Name = string.Empty };

    @* protected override void OnInitialized()
    {
        ProjectService.OnChange += StateHasChanged;
    } *@

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var result = await ProjectService.GetProjectById((int)Id);
            project = result.Adapt<ProjectRequest>();
        }
    }

    async Task HandleSubmit()
    {
        if(Id is null)
        {
            await ProjectService.CreateProject(project);
            NavigationManager.NavigateTo("/projects");
        } 
        else
        {
            await ProjectService.UpdateProject((int)Id, project);
            NavigationManager.NavigateTo("/projects");            
        }
    }

    async Task DeleteProject()
    {
        var confirmed = await JSRuntime
            .InvokeAsync<bool>("confirm", "Do you really want to delete this project?");
        if(Id is not null && confirmed)
        {
            await ProjectService.DeleteProject((int)Id);
            NavigationManager.NavigateTo("/projects");
        }
    }

    @* public void Dispose()
    {
        ProjectService.OnChange -= StateHasChanged;
    } *@
}