@page "/project"
@page "/project/{id:int}"
@using Mapster
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@* @implements IDisposable *@

@if(Id is null)
{
    <PageTitle>Create a new Project</PageTitle>
    <h3>Create a new Project</h3>
} 
else
{
    <PageTitle>Edit the Project "@project.Name"</PageTitle>
    <h3>Edit the Project "@project.Name"</h3>
}


<EditForm Model="project" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <MyInputText Id="name" Label="Name" @bind-Value="project.Name" ValidationFor="() => project.Name" />
    <MyInputTextArea Id="description" Label="Description" @bind-Value="project.Description"
        ValidationFor="() => project.Description" />
    <MyInputDateNullable Id="startDate" Label="Start" @bind-Value="project.StartDate"
        ValidationFor="() => project.StartDate" />
    <MyInputDateNullable Id="endDate" Label="End" @bind-Value="project.EndDate"
        ValidationFor="() => project.EndDate" />
    
    <div class="flex gap-4">
        @if(Id is not null)
        {
            <MyButton Type="button" Level="MyButton.ButtonLevel.Danger" Text="Delete"
                OnClick="DeleteProject" AddMarginTop />
        }
        <MyButton Text="Submit" Type="submit" AddMarginTop />
    </div>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    ProjectRequest project = new ProjectRequest{ Name = string.Empty };

    @* protected override void OnInitialized()
    {
        ProjectService.OnChange += StateHasChanged;
    } *@

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var result = await ProjectService.GetProjectById((int)Id);
            project = result.Adapt<ProjectRequest>();
        }
    }

    async Task HandleSubmit()
    {
        if(Id is null)
        {
            await ProjectService.CreateProject(project);
            NavigationManager.NavigateTo("/projects");
        } 
        else
        {
            await ProjectService.UpdateProject((int)Id, project);
            NavigationManager.NavigateTo("/projects");            
        }
    }

    async Task DeleteProject()
    {
        var confirmed = await JSRuntime
            .InvokeAsync<bool>("confirm", "Do you really want to delete this project?");
        if(Id is not null && confirmed)
        {
            await ProjectService.DeleteProject((int)Id);
            NavigationManager.NavigateTo("/projects");
        }
    }

    @* public void Dispose()
    {
        ProjectService.OnChange -= StateHasChanged;
    } *@
}