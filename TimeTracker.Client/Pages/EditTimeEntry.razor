@page "/timeentry"
@page "/timeentry/{id:int}"
@inject ITimeEntryService TimeEntryService
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@implements IDisposable

@if(Id is null)
{
    <h3>Create Time Entry</h3>
} 
else
{
    <h3>Edit Time Entry</h3>
}


<EditForm Model="timeEntry" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <MyInputDateTime Id="startDate" Label="Start"
        @bind-Value="timeEntry.Start" ValidationFor="() => timeEntry.Start" />
    <MyInputDateTimeNullable Id="endDate" Label="End"
        @bind-Value="timeEntry.End" ValidationFor="() => timeEntry.End" />
    <MyInputSelect Id="project" Label="Project"
        @bind-Value="timeEntry.ProjectId"
        Items="ProjectService.Projects
            .Select(p => new MyInputSelect.SelectListItem {
                Value = p.Id.ToString(), DisplayName = p.Name
            })"
        ValidationFor="() => timeEntry.ProjectId"/>
    <div class="flex gap-4">
        @if(Id is not null)
        {
            <MyButton Text="Delete" Level="MyButton.ButtonLevel.Danger" AddMarginTop OnClick="DeleteTimeEntry" />
        }
        <MyButton Text="Submit" Type="submit" AddMarginTop />
    </div>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    TimeEntryRequest timeEntry = new TimeEntryRequest();

    protected override void OnInitialized()
    {
        ProjectService.OnChange += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var result = await TimeEntryService.GetTimeEntryById((int)Id);
            timeEntry = new TimeEntryRequest {
                ProjectId = result.Project.Id,
                Start = result.Start,
                End = result.End
            };
        }
    }

    async Task HandleSubmit()
    {
        if(Id is null)
        {
            await TimeEntryService.CreateTimeEntry(timeEntry);
            NavigationManager.NavigateTo("/timeentries");
        } 
        else
        {
            await TimeEntryService.UpdateTimeEntry((int)Id, timeEntry);
            NavigationManager.NavigateTo("/timeentries");            
        }
    }

    async Task DeleteTimeEntry()
    {
        var confirmed = await JSRuntime
            .InvokeAsync<bool>("confirm", "Do you really want to delete this entry?");
        if(Id is not null && confirmed)
        {
            await TimeEntryService.DeleteTimeEntry((int)Id);
            NavigationManager.NavigateTo("/timeentries");
        }
    }

    public void Dispose()
    {
        ProjectService.OnChange -= StateHasChanged;
    }
}